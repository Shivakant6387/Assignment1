1) Create a branch   from master/main 
2) add change to master 
3)create a pull request with appropriate command 
4) merge the pull request
Assignment: Memory Management in Java 
Focus:  where variables are created & scope of various types of variables( e.g method local, static , etc )
1) study the methods of Object class

Assignment : (First priority task)
write  Add method  using generics to add any type ( note: for string ,char you can just concatenate)
1) what is generic in java?
2) what is generic class in java?
3) what is Generic type
4)what is Generic method
5)Bounded Type Parameters
6)Advantages Of Java Generics
#1) Type Safety
#2) Code Reusability
#3) No Need For Typecasting
#4) Implement Generic Algorithms
#5) Compile-Time Checking
Q #1) Why do we use Generics in Java?
Q #2) Are Generics important in Java?
Q #3) When did Java add Generics?
Q #4) What is a Generic type?
Q #5) Can we use Generics with Array in Java?
Assignment: Memory Management in Java 
Garbage Collector:-
Program counter (PC) registers:-
1)Can you use abstract and final both with a method ?
2)Can we execute a program without main()method?
3) Difference Between the Constructor and method 
4)Can we override the private methods
6) Difference between  method overloading method overriding in java
7) Can we make constructors static ?
8) Can we override a static method ?
9)Difference between abstract class and interface
10)what is Marker Interface?
11)Can we abstract class in java that has main method?
12) what is abstract class
13)Execution sequence for static block, block, constructor and method.
14)Is Multiple inheritance supported in Java ? Why ?
15)Can we declare main method as final ?
16)How to prevent inheritance and method overriding in java?
17)explain oops concepts with real time example in java
18)Can we declare a constructor as final ?
19)Can we declare an interface as final ?
20)Distinguish between static loading and dynamic class loading ?
21)what is constructore in java
22)what is  abstract keyword
Create and use while loops
Create and use for loops, including the enhanced for loop
Create and use do-while loops 
Compare loop constructs
Use break and continue
Working with methods and encapsulation
Create methods with arguments and return values, including overloaded methods 
Apply the static keyword to methods and fields 
Create and overload constructors, including impact on default constructors 
Apply access modifiers
Apply encapsulation principles to a class
Determine the effect on object references and primitive values when they are passed 
into methods that change the values
1) Iterating streams 
2) Max,Min, in streams
3)Distinct and Collector
4)Filtering and ttransformations 
5)Grouping data with streams
6)Reduce and flatmap 
7)Joining strings
Define the scope of variables 
Define the structure of a Java class
Create executable Java applications with a main method; run a Java program from 
the command line, including console output
Import other Java packages to make them accessible in your code
Compare and contrast the features and components of Java, such as platform inde- 
pendence, object orientation, encapsulation, and so on
Working with Java data types
Declare and initialize variables (including casting of primitive data types) 
Differentiate between object reference variables and primitive variables 
Know how to read and write to object fields
Explain an object's lifecycle (creation, "dereference by reassignment," and garbage 
collection)
Develop code that uses wrapper classes such as Boolean, Double, and Integer 
Using 0perators and decision constructs
Use Java operators, including parentheses to override operator precedence 
Test equality between Strings and other objects using == and equals() 
Create if and if/else and ternary constructs
Use a switch statement
Assignment: Study  Comparator,Comparable and its methods and show 2 examples each.
Assignment: Study Top 20 Generics interview questions and answer with code.
1)generic



java 8 feature
1)Interface & Abstract class
2)Functional interface
3)Lambda
4)inbuld functional interface
5)constructor (Super keyword)
